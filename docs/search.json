[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction",
    "section": "",
    "text": "This guide is a detailed walk-through of how CTD data is processed by ODIS (Ocean Data Information Section) at the Bedford Institute of Oceanography (BIO).\n\n\n\n\n\n\nMore Information\n\n\n\nAlthough what a CTD is will be described briefly on the Data Acquisition page; for more in-depth explanations, please check out the information on these pages at the NOAA Ocean Explorer and Wiki websites.\n\n\nThe CTD data processing that has been conducted at BIO by ODIS has evolved over time; but it has been years since there has been a comprehensive source outlining the procedure.\nThe goal of creating this site is to hopefully document CTD data processing with all of the pertinent details; so that new data processors can follow the guide and begin processing CTD data without a lot of oversight.\nAs with the data processing, this guide will continue to evolve as the instruments, sensors, software, and procedures change.",
    "crumbs": [
      "Overview",
      "Introduction"
    ]
  },
  {
    "objectID": "acquisition.html",
    "href": "acquisition.html",
    "title": "Data Acquisition",
    "section": "",
    "text": "At BIO, we use instruments and various other methods to collect data. These sources of data are used in aiding the Department of Fisheries and Oceans with its mandate of managing Canadian waters and their resources.\nOne of the ways data is collected is via electronic instruments. These instruments generally have sensors that are used to measure parameters like dissolved oxygen, salinity, temperature, pressure, and fluorescence.\nA key oceanographic instrument is called a CTD (Conductivity, Temperature, and Depth instrument; see figure 1). A CTD is used to measure oceanographic parameters vertically through the water column, when it is lowered and raised on a cable; or as a time-series at a fixed depth, when the instrument is moored.\n\n\n\nFigure 1. A CTD package housed within a metal frame used to acquire vertical profiles in the water column.\n\n\nThe main sensors are conductivity, temperature, and depth (where depth is computed from the data obtained by a pressure sensor).\nThere are many other sensors available to measure parameters in marine environments; with more being manufactured every year.\nThe two main companies that design and sell CTD instruments are Sea-Bird Scientific and RBR.\nAlthough the vast majority of the CTD data we have collected has been done with instruments from Sea-Bird Scientific; more and more profiles are being collected using instruments from RBR.\nSo you have successfully collected data - now it’s time to clean it!",
    "crumbs": [
      "Overview",
      "Data Acquisition"
    ]
  },
  {
    "objectID": "processing.html",
    "href": "processing.html",
    "title": "Data Processing",
    "section": "",
    "text": "Once data has been acquired, it has to be processed, which involves a variety of quality assurance and quality control steps. The goal of this process is to produce a data set that is in the best shape to be used for analysis and study.\nCurrently, the processing of a CTD data set is divided into four phases, which are:\n\nCalibrations\nMetadata Quality Control\nData Quality Control\nData Set Archival\n\nEach phase will be described in detail on the pages that follow.\nKnown issues that may crop up during each data processing phase will be presented with examples; along with guidance on how these issues have been handled to date.\n\nThe acquired data are stored in raw data files; either output as plain text or in binary format. These raw data files, identified by their file extensions, have different formats depending on the CTD instrument and manufacturer.\nThe raw data files produced by Sea-Bird Scientific instruments are:\n\n.con or .xmlcon - the configuration file (plain text) used to identify the list of sensors and their respective coefficients and settings that was used on the CTD.\n.hdr - a header file (plain text) which contains the metadata associated with the CTD cast.\n.hex or .xml - the raw data file (binary) which contains the sensor voltage readings, etc. before being converted to expected engineering units.\n.bl - the bottle file (plain text) which is created when bottles are fired as part of the CTD deployment.\n\nThe raw data files produced by RBR are:\n\n.rsk - a Ruskin file (binary) which contains all of the information related to the CTD and its deployment.\n\nMost CTD files being processed by ODIS were acquired using Sea-Bird Scientific instruments.\nSea-Bird Scientific software is complicated, so Flo Hum developed the in-house Java wrapper for this software called CTDDAP (see figure 2).\n\n\n\nFigure 2: Screen capture of CTDDAP when it is first opened.\n\n\nCTDDAP is used to process Sea-Bird raw data files to generate files in the BIO in-house formats (.ODF and .QAT).\nODF files are the full profiles of the CTD casts (normally separate files for the down cast and up cast). They are usually binned in 1 dbar bins. They contain far more metadata than normal Sea-Bird output file formats.\nQAT files contain CTD data records when bottles were fired (usually taken from up cast data). These files are integral for CTD data correction and BioChem database loading.\nThe source data and final processed data set are both archived locally. The final data set is also submitted to the national data center. Once it is ingested into the national data center, it is then pushed out to international data centers for wider distribution and access.",
    "crumbs": [
      "Overview",
      "Data Processing"
    ]
  },
  {
    "objectID": "phase4.html",
    "href": "phase4.html",
    "title": "Phase 4: Data Set Archival",
    "section": "",
    "text": "Flowchart diagram of phase 4 of CTD processing.",
    "crumbs": [
      "Data Processing Phases",
      "Phase 4: Data Set Archival"
    ]
  },
  {
    "objectID": "phase1.html",
    "href": "phase1.html",
    "title": "Phase 1: Calibrations",
    "section": "",
    "text": "Figures ? and ? below display images generated during the CTD oxygen data correction process for mission HUD2021185. The mission’s data set was broken up into two groups because the oxygen sensors were changed part way through the mission.\nThe first image displays the linear correction computed for group A’s primary oxygen sensor.",
    "crumbs": [
      "Data Processing Phases",
      "Phase 1: Calibrations"
    ]
  },
  {
    "objectID": "phase2.html",
    "href": "phase2.html",
    "title": "Phase 2: Metadata Quality Control",
    "section": "",
    "text": "Flowchart diagram of phase 2 of CTD processing.",
    "crumbs": [
      "Data Processing Phases",
      "Phase 2: Metadata Quality Control"
    ]
  },
  {
    "objectID": "phase1.html#calibration",
    "href": "phase1.html#calibration",
    "title": "Phase 1: Calibrations",
    "section": "Calibration",
    "text": "Calibration\nThis document weaves together content and executable code to document the CTD processing process. To learn more about this document, please contact Yongcun Hu.",
    "crumbs": [
      "Data Processing Phases",
      "Phase 1: Calibrations"
    ]
  },
  {
    "objectID": "phase1.html#libraries",
    "href": "phase1.html#libraries",
    "title": "Phase 1: Calibrations",
    "section": "Libraries",
    "text": "Libraries\nFirst step is to install and/or load required libraries:\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr)\n\nWarning: package 'tidyr' was built under R version 4.3.3\n\nlibrary(ggplot2)\n\nWarning: package 'ggplot2' was built under R version 4.3.3\n\nlibrary(utils)\nlibrary(readxl)\n\nWarning: package 'readxl' was built under R version 4.3.3",
    "crumbs": [
      "Data Processing Phases",
      "Phase 1: Calibrations"
    ]
  },
  {
    "objectID": "phase1.html#read-wrangle-data",
    "href": "phase1.html#read-wrangle-data",
    "title": "Phase 1: Calibrations",
    "section": "Read & Wrangle Data",
    "text": "Read & Wrangle Data\nThis section will read all required data. This section will be modified to make it as generalized as possible.\n\nwd &lt;- getwd()    # setting working directory\nprint(wd)\n\n[1] \"C:/DEV/GitHub/ctd-processing\"\n\ninput_file &lt;- file.path(wd, 'data', 'AT4802_Oxygen_Rpt_template.csv')    # setting input file path                     \nprint(input_file)\n\n[1] \"C:/DEV/GitHub/ctd-processing/data/AT4802_Oxygen_Rpt_template.csv\"\n\ndf_data_raw &lt;- read.csv(input_file)\n\ndf_data_raw &lt;- df_data_raw %&gt;%\n    dplyr::mutate(., winklervg = rowMeans(cbind(.$Oxy_W_Rep1, .$Oxy_W_Rep2), na.rm = TRUE)) %&gt;%\n    dplyr::arrange(Event, SAMPLE_ID)\n\nOnce data is loaded, next step is to filter outliers between Winkler replicates. What are winklers?\n\nOxy_W_diff &lt;- df_data_raw$Oxy_W_Rep1 - df_data_raw$Oxy_W_Rep2\nOxy_W_box &lt;- boxplot(Oxy_W_diff, ylab = \"Oxygen Difference (ml/l)\",\n                                 main = \"Figure 1: Boxplot of Winkler Replicate Differences\")\n\n\n\n\n\n\n\nOxy_W_outliers &lt;- Oxy_W_diff %in% Oxy_W_box$out\n\nPlot outliers in red\n\nplot(Oxy_W_diff, ylab = \"Winkler Rep1 - Rep 2 (ml/l)\",\n                 xlab = \"Ordered by Event and Increasing Sample ID\",\n                 main = \"Figure 2: Outliers Outside 1.5*IQR\")\noutliers_index = which(Oxy_W_outliers == TRUE)\nnew_Oxy_W_diff &lt;- matrix(NA, length(Oxy_W_diff))\nnew_Oxy_W_diff[outliers_index] = Oxy_W_box$out\npoints(new_Oxy_W_diff, col = \"red\")\n\n\n\n\n\n\n\n#\n# subset original data removing the Winker difference outliers\n#\ndf_data_filtered_W &lt;- df_data_raw %&gt;% .[!Oxy_W_outliers ,]\n\n#\n# Original SOC values for the CTD oxygen sensors used during the mission \n# primary sensor (4136) and the secondary sensor (4140).\n#\nsoc1 &lt;- .5358\nsoc2 &lt;- .5714\n\n###############################################################################\n####  Compare the primary sensor (4136) with the secondary sensor (4140).  ####\n###############################################################################\n#\n# filter outliers between CTD sensors\n#\nOxy_CTD_diff &lt;- df_data_filtered_W$Oxy_CTD_P - df_data_filtered_W$Oxy_CTD_S\nOxy_CTD_box &lt;- boxplot(Oxy_CTD_diff,\n                       ylab = \"Oxygen Difference (ml/l)\",\n                       main = paste(\"Figure 3: Boxplot of CTD Oxygen Sensor Differences\", \"\\n\",\n                                    \"Primary (4136) - Secondary (4140)\"))\n\n\n\n\n\n\n\nOxy_CTD_outliers &lt;- Oxy_CTD_diff %in% Oxy_CTD_box$out\n\n#\n# plot the outliers between CTD sensors in red ####\n#\nplot(Oxy_CTD_diff, ylab = \"CTD  Primary - Secondary (ml/l)\",\n                   xlab = \"Ordered by Event and Increasing Sample ID\",\n                   main = \"Figure 4: Outliers Outside 1.5*IQR\")\noutliers_index = which(Oxy_CTD_outliers == TRUE)\nnew_Oxy_CTD_diff &lt;- matrix(NA, length(Oxy_CTD_diff))\nnew_Oxy_CTD_diff[outliers_index] &lt;- Oxy_CTD_box$out\npoints(new_Oxy_CTD_diff, col = \"red\", pch = 19)\n\n\n\n\n\n\n\n#\n# subset the data removing the CTD difference outliers\n#\ndf_data_filtered_WC &lt;- df_data_filtered_W %&gt;% .[!Oxy_CTD_outliers ,]\n\n#\n# filter outliers between the CTD primary and average of Winkler replicates\n#\nprimary_winkler_diff &lt;- df_data_filtered_WC$Oxy_CTD_P - df_data_filtered_WC$winklervg\nprimary_winkler_diff &lt;- primary_winkler_diff - mean(primary_winkler_diff, na.rm = TRUE)\nprimary_winkler_box &lt;- boxplot(primary_winkler_diff,\n                               ylab = \"Oxygen Difference (ml/l)\",\n                               main = \"Figure 5: Boxplot of CTD Primary - Winkler Oxygen Differences\")\n\n\n\n\n\n\n\nprimary_winkler_outliers &lt;- primary_winkler_diff %in% primary_winkler_box$out\n\n#\n# plot the outliers in red\n#\nplot(primary_winkler_diff, ylab = \"CTD Primary - Winkler (ml/l)\",\n                           xlab = \"Ordered by Event and Increasing Sample ID\",\n                           main = \"Figure 6: Identified Outliers Outside of 1.5*IQR \")\nnew_primary_winkler_diff &lt;- matrix(NA, length(primary_winkler_diff))\noutliers_index &lt;- which(primary_winkler_outliers == TRUE)\nnew_primary_winkler_diff[outliers_index] &lt;- primary_winkler_box$out\npoints(new_primary_winkler_diff, col = \"red\", pch = 19)\n\n\n\n\n\n\n\n#\n# drop the rows that contained outliers\n#\ndf_data_filtered_WCO &lt;- df_data_filtered_WC %&gt;% .[!primary_winkler_outliers ,]\n\n#\n# filter outliers between CTD secondary and Winkler replicates (average)\n#\nsecondary_winkler_diff &lt;- df_data_filtered_WCO$Oxy_CTD_S - df_data_filtered_WCO$winklervg\nsecondary_winkler_diff &lt;- secondary_winkler_diff - mean(secondary_winkler_diff, na.rm = TRUE)\nsecondary_winkler_box &lt;- boxplot(secondary_winkler_diff,\n                                 ylab = \"Oxygen Difference (ml/l)\",\n                                 main = \"Figure 7: Boxplot of CTD Secondary - Winkler Oxygen Differences\")\n\n\n\n\n\n\n\nsecondary_winkler_outliers &lt;- secondary_winkler_diff %in% secondary_winkler_box$out\n\n#\n# drop the rows that contained outliers\n#\ndf_data_filtered_WCOS &lt;- df_data_filtered_WCO %&gt;% .[!secondary_winkler_outliers ,]\n\n#\n# calculate new SOC for Primary CTD Oxygen\n#\nsoc1_ratio &lt;- mean(df_data_filtered_WCOS$winklervg / df_data_filtered_WCOS$Oxy_CTD_P, na.rm = TRUE)\nsoc1_new &lt;- soc1 * soc1_ratio\n\n#\n# apply correction\n#\ndf_data_filtered__corr &lt;- df_data_filtered_WCOS %&gt;% \n                              dplyr::mutate(., Oxy_CTD_P_corr = soc1_ratio * Oxy_CTD_P)\n\n#\n# calculate new SOC for Secondary CTD Oxygen\n#\nsoc2_ratio &lt;- mean(df_data_filtered_WCOS$winklervg / df_data_filtered_WCOS$Oxy_CTD_S, na.rm = TRUE)\nsoc2_new &lt;- soc2*soc2_ratio\n\n#\n# apply correction\n#\ndf_data_filtered__corr &lt;- df_data_filtered__corr %&gt;%\n                              dplyr::mutate(., Oxy_CTD_S_corr = soc2_ratio * Oxy_CTD_S)\n\n#\n# plot the outliers in red\n#\nplot(secondary_winkler_diff, ylab = \"CTD Secondary - Winkler (ml/l)\",\n                             xlab = \"Ordered by Event and Increasing Sample ID\",\n                             main = \"Figure 8: Outliers Outside 1.5*IQR\")\nnew_secondary_winkler_diff &lt;- matrix(NA, length(secondary_winkler_diff))\noutliers_index &lt;- which(secondary_winkler_outliers == TRUE)\nnew_secondary_winkler_diff[outliers_index] &lt;- secondary_winkler_box$out\npoints(new_secondary_winkler_diff, col = \"red\", pch = 19)\n\n\n\n\n\n\n\n#################################################\n#####  Plot Primary CTD Oxygen (4136) data  #####\n#################################################\n#\n# rearrange the data for plotting\n#\ndf_tmp1 &lt;- df_data_filtered__corr %&gt;%\n    dplyr::select(., Oxy_CTD_P, Oxy_CTD_P_corr, winklervg) %&gt;%\n    tidyr::gather(., key, ctd, Oxy_CTD_P, Oxy_CTD_P_corr) %&gt;%\n    dplyr::mutate(., key=ifelse(key == \"Oxy_CTD_P\", \"Uncorrected\", \"Corrected\"))\n\n#\n# Save Group A Soc linear regression plot to a PNG file\n#\npngFile &lt;- \"AT4802_Primary_Oxygen_LR.png\"\npng(filename = pngFile, width = 2000, height = 1500, res = 300)\n\n#\n# initialize plot\n#\np1 &lt;- ggplot() +\n      coord_cartesian() +\n      scale_x_continuous(limits = c(5,10), name = \"Winkler (ml/l)\") +\n      scale_y_continuous(limits = c(5,10), name = \"CTD (ml/l)\") +\n      scale_shape_manual(values = c(0,1)) +\n      scale_color_manual(values = c(\"red\", \"blue\"))\n\n#\n# plot 1:1 line\n#\np1 &lt;- p1 + \n      geom_line(\n          mapping = aes(x = x, y = y),\n          data = data.frame(x = 5:10, y = 5:10),\n          stat = \"identity\",\n          position = position_identity()\n      )  \n\n#\n# plot data\n#\np1 &lt;- p1 + \n      geom_point(\n          data = df_tmp1,\n          mapping = aes(x = winklervg, y = ctd, shape = key, color = key),\n          stat = \"identity\",\n          position = position_identity(),\n          size = 2\n      )\n\n#\n# Plot 9: customize plot components\n#\np1 &lt;- p1 +\n      theme_bw() +\n      ggtitle(\"CTD Primary Oxygen Correction\") +\n      theme(\n          axis.text = element_text(colour = \"black\", angle = 0, hjust = 0.5, vjust = 0.5, size = 12),\n          axis.title = element_text(size = 14, face = \"bold\"),\n          plot.title = element_text(colour = \"black\", face = \"bold\", hjust = 0.5, vjust = 1, size = 15),\n          legend.text = element_text(size = 12),\n          legend.position = c(.25, .75),\n          legend.direction = \"vertical\",\n          legend.key.size = unit(0.6, \"cm\"),\n          legend.key.width = unit(0.5,\"cm\"),\n          legend.title = element_blank(),\n          panel.border = element_rect(colour = \"black\", fill = NA, size = .65),\n          plot.margin = unit(c(0.1,0.1,0.1,0.1), \"cm\")\n      )\n\nWarning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.\n\n\nWarning: A numeric `legend.position` argument in `theme()` was deprecated in ggplot2\n3.5.0.\nℹ Please use the `legend.position.inside` argument of `theme()` instead.\n\nsuppressWarnings(print(p1))\n\n#\n# Stop outputting plotting info to PNG file\n#\ndev.off()\n\npng \n  2 \n\n#################################################\n####  Plot Secondary CTD Oxygen (4140) data  ####\n#################################################\n#\n# rearrange the data for plotting\n#\ndf_tmp2 &lt;- df_data_filtered__corr %&gt;%\n    dplyr::select(., Oxy_CTD_S, Oxy_CTD_S_corr, winklervg) %&gt;%\n    tidyr::gather(., key, ctd, Oxy_CTD_S, Oxy_CTD_S_corr) %&gt;%\n    dplyr::mutate(., key=ifelse(key == \"Oxy_CTD_S\", \"Uncorrected\", \"Corrected\"))\n\n#\n# Save Group A Soc linear regression plot to a PNG file\n#\npngFile &lt;- \"AT4802_Secondary_Oxygen_LR.png\"\npng(filename = pngFile, width = 2000, height = 1500, res = 300)\n\n#\n# initialize plot\n#\np2 &lt;- ggplot() +\n      coord_cartesian() +\n      scale_x_continuous(limits = c(5,10), name = \"Winkler (ml/l)\") +\n      scale_y_continuous(limits = c(5,10), name = \"CTD (ml/l)\") +\n      scale_shape_manual(values = c(0,1)) +\n      scale_color_manual(values = c(\"red\", \"blue\"))\n\n#\n# plot 1:1 line\n#\np2 &lt;- p2 + \n      geom_line(\n          mapping = aes(x = x, y = y),\n          data = data.frame(x = 5:10, y = 5:10),\n          stat = \"identity\",\n          position = position_identity()\n      )  \n\n#\n# plot data\n#\np2 &lt;- p2 + \n      geom_point(\n          data = df_tmp2,\n          mapping = aes(x = winklervg, y = ctd, shape = key, color = key),\n          stat = \"identity\",\n          position = position_identity(),\n          size = 2\n      )\n\n#\n# Plot #10: customize the plot components\n#\np2 &lt;- p2 +\n      theme_bw() +\n      ggtitle(\"CTD Secondary Oxygen Correction\") +\n      theme(\n          axis.text = element_text(colour = \"black\", angle = 0, hjust = 0.5, vjust = 0.5, size = 12),\n          axis.title = element_text(size = 14, face = \"bold\"),\n          plot.title = element_text(colour = \"black\", face = \"bold\", hjust = 0.5, vjust = 1, size = 15),\n          legend.text = element_text(size = 12),\n          legend.position = c(.25, .75),\n          legend.direction = \"vertical\",\n          legend.key.size = unit(0.6, \"cm\"),\n          legend.key.width = unit(0.5,\"cm\"),\n          legend.title = element_blank(),\n          panel.border = element_rect(colour = \"black\", fill = NA, size = .65),\n          plot.margin = unit(c(0.1,0.1,0.1,0.1), \"cm\")\n      )\n\nsuppressWarnings(print(p2))\n\n#\n# Stop outputting plotting info to PNG file\n#\ndev.off()\n\npng \n  2 \n\n###############################################################################################\n#### Plot the CTD Oxygen Differences between the two sensors before and after Correction.  ####\n###############################################################################################\n#\n# Save Group A oxygen differences plot to a PNG file\n#\npngFile &lt;- \"AT4802_Oxygen_Differences.png\"\npng(filename = pngFile, width = 2000, height = 1500, res = 300)\n\n#\n# plot the CTD oxygen differences between the two sensors before and after Correction\n#\nodiff &lt;- df_data_filtered__corr$Oxy_CTD_P - df_data_filtered__corr$Oxy_CTD_S\n\n#\n# Plot #11\n#\nplot(odiff, col = \"black\", ylim = range(-0.15, 0.25),\n                           main = 'Calibrated CTD Oxygen Differences',\n                           ylab = 'Primary - Secondary (ml/l)',\n                           cex.main = 1.5,\n                           cex.lab = 1.5, cex.axis = 1.25)\nmean_odiff &lt;- mean(odiff, na.rm = TRUE)\nabline(mean_odiff, 0, col = \"black\")\nodiff_corr &lt;- df_data_filtered__corr$Oxy_CTD_P_corr - df_data_filtered__corr$Oxy_CTD_S_corr\npoints(odiff_corr, col = \"blue\", ylim = range(-0.15, 0.25))\nmean_odiff_corr &lt;- mean(odiff_corr, na.rm = TRUE)\nabline(mean_odiff_corr, 0, col = \"blue\")\nmean_odiff\n\n[1] -0.03721808\n\nmean_odiff_corr\n\n[1] -0.002956482\n\n#\n# Stop outputting plotting info to PNG file\n#\ndev.off()\n\npng \n  2 \n\n#\n# Output the final corrected data into Excel spreadsheets for the two sensor groups.\n#\nlibrary(xlsx)\n\nWarning: package 'xlsx' was built under R version 4.3.3\n\nwrite.xlsx(df_data_filtered__corr, \"oxyCorDf.xlsx\", col.names = TRUE, row.names = FALSE)",
    "crumbs": [
      "Data Processing Phases",
      "Phase 1: Calibrations"
    ]
  }
]